// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.npx prisma migrate deployly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String              @id @default(uuid())
    old_id             Int?                @db.Integer
    email              String              @unique @db.VarChar(100)
    firstname          String              @db.VarChar(100)
    lastname           String              @db.VarChar(100)
    password           Password?
    active             Boolean             @default(false)
    verified           Boolean             @default(false)
    avatar             String?             @db.VarChar(255)
    avatar_md          String?             @db.VarChar(255)
    blurred_avatar     String?             @db.VarChar(255)
    blurred_avatar_md  String?             @db.VarChar(255)
    role               RoleStatus          @default(MEMBER)
    taaruf_status      TaarufStatus        @default(BLOCKED)
    auth               Auth[]
    Taaruf_gold        Taaruf_gold[]
    Payment            Payment[]
    reset_password     ResetPassword[]
    activations        Activation[]
    biodata            Biodata?
    bookmarks          Bookmark[]          @relation("UserBookmarks")
    bookmark_candidate Bookmark[]          @relation("UserCandidates")
    Taaruf             Taaruf[]            @relation("TaarufUser")
    Taaruf_candidate   Taaruf[]            @relation("TaarufCandidates")
    Question           Question[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @default(now()) @updatedAt
    backup_detail      BackupDetail?
    taaruf_cancelation TaarufCancelation[]
    Nadhar             Nadhar[]
    Khitbah            Khitbah[]
    Akad               Akad[]
    inbox              Inbox[]             @relation("user")
    inbox_responder    Inbox[]             @relation("responder")
    Response           Response[]
    MessageSender      InboxMessage[]      @relation("MessageSender")
    MessageReceiver    InboxMessage[]      @relation("MessageReceiver")

    @@map("user")
}

model BackupDetail {
    user   User?  @relation(fields: [userId], references: [id])
    userId String @unique
    old_id Int    @db.Integer

    @@map("backup_detail")
}

model Password {
    id        String   @id @default(uuid())
    user      User?    @relation(fields: [userId], references: [id])
    userId    String   @unique
    password  String   @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("password")
}

model Client {
    id                String    @id @default(uuid())
    name              String    @db.VarChar(100)
    about             String?   @db.Text
    phone             String    @db.VarChar(20)
    address           String    @db.Text
    taaruf_muqoddimah String?   @db.Text
    login_muqoddimah  String?   @db.Text
    signup_muqoddimah String?   @db.Text
    youtube           String?   @db.VarChar(100)
    facebook          String?   @db.VarChar(100)
    twitter           String?   @db.VarChar(100)
    tiktok            String?   @db.VarChar(100)
    instagram         String?   @db.VarChar(100)
    linkedin          String?   @db.VarChar(100)
    galleries         Gallery[]
    sliders           Slider[]
    faqs              FAQ[]

    @@map("client")
}

enum RoleStatus {
    MEMBER
    ADMIN
    SUPERADMIN
}

enum TaarufStatus {
    OPEN
    ACTIVE
    BLOCKED
}

model Auth {
    id           String   @id @default(uuid())
    user         User     @relation(fields: [userId], references: [id])
    userId       String
    access_token String   @db.VarChar(300)
    expiredAt    DateTime @default(now())
    path         String   @db.VarChar(100)
    method       String   @db.VarChar(100)
    createdAt    DateTime @default(now())

    @@map("auth")
}

model ResetPassword {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    used      Boolean  @default(false)
    expiredAt DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("reset_password")
}

model Gallery {
    id        String   @id @default(uuid())
    Client    Client   @relation(fields: [clientId], references: [id])
    clientId  String
    title     String?  @db.VarChar(100)
    photo     String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("gallery")
}

model Slider {
    id        String   @id @default(uuid())
    Client    Client   @relation(fields: [clientId], references: [id])
    clientId  String
    title     String?  @db.Text
    photo     String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("slider")
}

model FAQ {
    id        String   @id @default(uuid())
    Client    Client   @relation(fields: [clientId], references: [id])
    clientId  String
    question  String   @db.VarChar(255)
    answer    String   @db.VarChar(255)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("faq")
}

model Activation {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    used      Boolean  @default(false)
    expiredAt DateTime @default(now())
    createdAt DateTime @default(now())

    @@map("activation")
}

model Biodata {
    id                      String                @id @default(uuid())
    user                    User                  @relation(fields: [userId], references: [id])
    userId                  String                @unique
    bio                     String                @db.Text
    phone                   String                @db.VarChar(20)
    company                 String?               @db.VarChar(100)
    manhaj                  ManhajStatus
    gender                  Gender
    marriage_status         MarriageStatus
    marriage_permission     MarriagePermission
    dob                     String                @db.VarChar(12)
    birth_place             String                @db.VarChar(100)
    birth_order             Int                   @db.SmallInt
    address                 String                @db.VarChar(100)
    address_town            String                @db.VarChar(100)
    address_province        String                @db.VarChar(100)
    hometown_province       String                @db.VarChar(100)
    address_zip_code        Int                   @db.Integer
    ethnic                  String                @db.VarChar(100)
    poligami_opinion        String                @db.Text
    createdAt               DateTime              @default(now())
    updatedAt               DateTime              @default(now()) @updatedAt
    answer                  Answer[]
    physical_characters     PhysicalCharacter?
    non_physical_characters NonPhysicalCharacter?
    marriage_preparations   MarriagePreparation?
    family_members          FamilyMember[]
    educations              Education[]
    life_goals              LifeGoal?
    ibadah                  Ibadah?
    physical_criteria       PhysicalCriteria?
    non_physical_criteria   NonPhysicalCriteria?
    experiences             Experience[]

    @@map("biodata")
}

enum ManhajStatus {
    SALAF
    BARU_BELAJAR
    NON_SALAF
}

enum Gender {
    PRIA
    WANITA
}

enum MarriageStatus {
    LAJANG
    MENIKAH
    CERAI_HIDUP
    CERAI_MATI
}

enum MarriagePermission {
    POLIGAMI
    NON_POLIGAMI
}

model Province {
    id      String  @id @default(uuid())
    name    String  @unique() @db.VarChar(100)
    deleted Boolean @default(false)

    @@map("province")
}

model Education {
    id               String   @id @default(uuid())
    institution_name String   @db.VarChar(100)
    major            String?  @db.VarChar(100)
    degree           String?  @db.VarChar(100)
    city             String?  @db.VarChar(100)
    startYear        Int      @db.Integer
    endYear          Int?     @db.Integer
    deleted          Boolean  @default(false)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @default(now()) @updatedAt
    Biodata          Biodata  @relation(fields: [biodataId], references: [id])
    biodataId        String   @unique

    @@map("education")
}

model LifeGoal {
    id                     String   @id @default(uuid())
    career                 String?  @db.Text
    domicile               String?  @db.Text
    child_count            String?  @db.Text
    child_education        String?  @db.Text
    financial_arrangement  String?  @db.Text
    knowledge_upgrade      String?  @db.Text
    short_term_achievement String?  @db.Text
    long_term_achievement  String?  @db.Text
    wife_work_permit       Boolean  @default(false)
    wife_work_permit_desc  String?  @db.Text
    createdAt              DateTime @default(now())
    updatedAt              DateTime @default(now()) @updatedAt
    biodata                Biodata  @relation(fields: [biodataId], references: [id])
    biodataId              String   @unique

    @@map("life_goal")
}

model PhysicalCharacter {
    id                     String      @id @default(uuid())
    height                 Int         @default(0) @db.Integer
    weight                 Int         @default(0) @db.Integer
    body_shape             body_shape?
    skin_color             skin_color?
    hair_color             hair_color?
    hair_type              hair_type?
    eye_color              eye_Color?
    characteristic         Boolean     @default(false)
    characteristic_detail  String?     @db.Text
    medical_history        Boolean     @default(false)
    medical_history_detail String?     @db.Text
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @default(now()) @updatedAt
    biodata                Biodata     @relation(fields: [biodataId], references: [id])
    biodataId              String      @unique

    @@map("physical_character")
}

enum body_shape {
    sangat_kurus
    kurus
    atletis
    normal
    gempal
    gemuk
    sangat_gemuk
}

enum skin_color {
    sawo_matang
    putih
    putih_kemerahan
    gelap
    hitam
}

enum hair_color {
    hitam
    pirang
    merah
    putih
}

enum hair_type {
    lurus
    ikal
    keriting
    kribo
    botak
}

enum eye_Color {
    hitam
    coklat
    biru
    hijau
}

model NonPhysicalCharacter {
    id                  String   @id @default(uuid())
    motto               String?  @db.Text()
    life_goal           String?  @db.Text()
    hobby               String?  @db.Text()
    spare_time_activity String?  @db.Text()
    positive_traits     String?  @db.Text()
    negative_traits     String?  @db.Text()
    liked_things        String?  @db.Text()
    unliked_things      String?  @db.Text()
    drink_alcohol       Boolean  @default(false)
    smoking             Boolean  @default(false)
    sport               String?  @db.Text()
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now()) @updatedAt
    biodata             Biodata  @relation(fields: [biodataId], references: [id])
    biodataId           String   @unique

    @@map("non_physical_character")
}

model FamilyMember {
    id           String        @id @default(uuid())
    biodata      Biodata       @relation(fields: [biodataId], references: [id])
    biodataId    String
    relationship relationship?
    religion     religion?
    dob          String        @db.VarChar(20)
    education    String        @db.Text
    job          String        @db.Text
    is_alive     Boolean       @default(true)
    deleted      Boolean       @default(false)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt

    @@map("family_member")
}

enum relationship {
    ayah
    ibu
    kakak_pria
    kakak_wanita
    adik_pria
    adik_wanita
    ipar_pria
    ipar_wanita
    anak_kandung
    anak_angkat
    none
}

enum religion {
    islam
    non_islam
}

model Taaruf_gold {
    id        String    @id @unique @default(uuid())
    user      User?     @relation(fields: [userId], references: [id])
    userId    String
    startedAt DateTime?
    endingAt  DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    Payment   Payment?

    @@map("taaruf_gold")
}

model Payment {
    id            String             @id @default(uuid())
    user          User?              @relation(fields: [userId], references: [id])
    userId        String
    gross_amount  Int
    midtransToken String?            @db.VarChar(255)
    status        String             @default("pending")
    paidAt        DateTime?
    midtrans      Midtrans_callback?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @default(now()) @updatedAt
    taaruf_gold   Taaruf_gold?       @relation(fields: [taaruf_goldId], references: [id])
    taaruf_goldId String?            @unique

    @@map("payment")
}

model Midtrans_callback {
    id            String   @id @default(uuid())
    payment       Payment? @relation(fields: [paymentId], references: [id])
    paymentId     String   @unique
    callback_data String   @db.Text
    createdAt     DateTime @default(now())

    @@map("midtrans_callback")
}

model Bookmark {
    id          String   @id @default(uuid())
    user        User     @relation(name: "UserBookmarks", fields: [userId], references: [id])
    userId      String // This field holds the foreign key
    candidate   User     @relation(name: "UserCandidates", fields: [candidateId], references: [id])
    candidateId String // This field holds the foreign key`
    bookmarked  Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    @@map("bookmark")
}

// TAARUF PROGGRESS
model Taaruf {
    id             String             @id @default(uuid())
    user           User               @relation(name: "TaarufUser", fields: [userId], references: [id])
    userId         String // This field holds the foreign key
    candidate      User               @relation(name: "TaarufCandidates", fields: [candidateId], references: [id])
    candidateId    String // This field holds the foreign key
    active         Boolean            @default(true)
    status         ApprovalStatus     @default(Pending)
    message        String             @db.Text
    taaruf_process TaarufProcess      @default(TaarufRequest)
    nadhars        Nadhar[]
    khitbahs       Khitbah[]
    akads          Akad[]
    cancelation    TaarufCancelation?
    Inbox          Inbox[]
    response       Response?
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @default(now()) @updatedAt

    @@map("taaruf")
}

enum TaarufProcess {
    TaarufRequest
    TaarufApproved
    TaarufRejected
    NadharRequest
    NadharApproved
    NadharRejected
    NadharCanceled
    KhitbahRequest
    KhitbahApproved
    KhitbahRejected
    KhitbahCanceled
    AkadRequest
    AkadApproved
    AkadRejected
    AkadCanceled
    Completed
    Canceled
}

model TaarufCancelation {
    id         String    @id @default(uuid())
    taaruf     Taaruf?   @relation(fields: [taarufId], references: [id])
    taarufId   String    @unique
    cancelById String
    cancelBy   User      @relation(fields: [cancelById], references: [id])
    message    String    @db.Text
    response   Response?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now()) @updatedAt

    @@map("taaruf_cancelation")
}

model Nadhar {
    id          String         @id @default(uuid())
    Taaruf      Taaruf?        @relation(fields: [taarufId], references: [id])
    taarufId    String
    requestBy   User           @relation(fields: [requestById], references: [id])
    requestById String
    schedule    String         @db.VarChar(12)
    status      ApprovalStatus @default(Pending)
    message     String         @db.Text
    response    Response?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @default(now()) @updatedAt

    @@map("nadhar")
}

model Khitbah {
    id          String         @id @default(uuid())
    Taaruf      Taaruf?        @relation(fields: [taarufId], references: [id])
    taarufId    String
    requestBy   User           @relation(fields: [requestById], references: [id])
    requestById String
    schedule    String         @db.VarChar(12)
    status      ApprovalStatus @default(Pending)
    message     String         @db.Text
    response    Response?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @default(now()) @updatedAt

    @@map("khitbah")
}

model Akad {
    id          String         @id @default(uuid())
    Taaruf      Taaruf?        @relation(fields: [taarufId], references: [id])
    taarufId    String
    requestBy   User           @relation(fields: [requestById], references: [id])
    requestById String
    schedule    String         @db.VarChar(12)
    status      ApprovalStatus @default(Pending)
    message     String         @db.Text
    response    Response?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @default(now()) @updatedAt

    @@map("akad")
}

model Response {
    id                  String             @id @default(uuid())
    responseBy          User               @relation(fields: [responseById], references: [id])
    responseById        String
    taaruf              Taaruf?            @relation(fields: [taarufId], references: [id])
    taarufId            String?            @unique
    taarufCancelation   TaarufCancelation? @relation(fields: [taarufCancelationId], references: [id])
    taarufCancelationId String?            @unique
    nadhar              Nadhar?            @relation(fields: [nadharId], references: [id])
    nadharId            String?            @unique
    khitbah             Khitbah?           @relation(fields: [khitbahId], references: [id])
    khitbahId           String?            @unique
    akad                Akad?              @relation(fields: [akadId], references: [id])
    akadId              String?            @unique
    message             String             @db.Text
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @default(now()) @updatedAt

    @@map("response")
}

enum ApprovalStatus {
    Pending
    Approved
    Rejected
    Canceled
}

model MarriagePreparation {
    id        String   @id @default(uuid())
    biodata   Biodata  @relation(fields: [biodataId], references: [id])
    biodataId String   @unique
    visi      String?  @db.Text
    misi      String?  @db.Text
    mental    String?  @db.Text
    mahar     String?  @db.Text
    cost      String?  @db.Text
    span_time String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("marriage_preparation")
}

model Ibadah {
    id                String       @id @default(uuid())
    shalat_fardu      ShalatFardu?
    shalat_rawatib    Cycle?
    shalat_dhuha      Cycle?
    shalat_tahajud    Cycle?
    puasa_ramadhan    Cycle?
    puasa_senin_kamis Cycle?
    puasa_daud        Cycle?
    puasa_ayamul_bid  Cycle?
    zakat             Cycle?
    sedekah           Cycle?
    umrah             Cycle?
    haji              Boolean      @default(false)
    biodata           Biodata      @relation(fields: [biodataId], references: [id])
    biodataId         String       @unique
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @default(now()) @updatedAt

    @@map("ibadah")
}

enum ShalatFardu {
    rutin_di_masjid
    kadang_di_masjid
    bolong_bolong
    pernah_sekali
    belum_pernah
}

enum Cycle {
    rutin
    kadang_kadang
    pernah_sekali
    belum_pernah
}

model PhysicalCriteria {
    id         String      @id @default(uuid())
    height     Int         @default(0) @db.Integer
    weight     Int         @default(0) @db.Integer
    body_shape body_shape?
    skin_color skin_color?
    hair_color hair_color?
    hair_type  hair_type?
    eye_color  eye_Color?
    biodata    Biodata     @relation(fields: [biodataId], references: [id])
    biodataId  String      @unique
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @default(now()) @updatedAt

    @@map("physical_criteria")
}

model NonPhysicalCriteria {
    id             String          @id @default(uuid())
    age            Int?            @db.Integer
    domicile       String?         @db.Text
    education      String?         @db.Text
    married_status MarriageStatus?
    sport          String?         @db.Text
    hobby          String?         @db.Text
    traits         String?         @db.Text
    ethnic         String?         @db.VarChar(100)
    job            String?         @db.Text
    other          String?         @db.Text
    biodata        Biodata         @relation(fields: [biodataId], references: [id])
    biodataId      String          @unique
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @default(now()) @updatedAt

    @@map("non_physical_criteria")
}

model Question {
    id        String   @id @default(uuid())
    question  String   @db.Text
    deleted   Boolean  @default(false)
    createdBy User     @relation(fields: [userId], references: [id])
    userId    String
    answers   Answer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("question")
}

model Answer {
    id         String   @id @default(uuid())
    biodata    Biodata  @relation(fields: [biodataId], references: [id])
    biodataId  String
    question   Question @relation(fields: [questionId], references: [id])
    questionId String
    answer     String   @db.Text
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@unique([questionId, biodataId])
    @@map("answer")
}

model Experience {
    id          String         @id @default(uuid())
    biodata     Biodata        @relation(fields: [biodataId], references: [id])
    biodataId   String
    type        ExperienceType @default(Kerja)
    start_year  Int            @db.Integer
    end_year    Int            @db.Integer
    position    String         @db.VarChar(100)
    description String         @db.Text
    deleted     Boolean        @default(false)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @default(now()) @updatedAt

    @@map("experience")
}

enum ExperienceType {
    Kerja
    Organisasi
}

model Inbox {
    id           String         @id @default(uuid())
    user         User           @relation(name: "user", fields: [userId], references: [id])
    userId       String
    responder    User           @relation(name: "responder", fields: [responderId], references: [id])
    responderId  String
    taaruf       Taaruf         @relation(fields: [taarufId], references: [id])
    taarufId     String
    title        String         @db.VarChar(255)
    read         Boolean        @default(false)
    is_favourite Boolean        @default(false)
    messages     InboxMessage[]
    createdAt    DateTime       @default(now()) // first date time created
    datetime     DateTime       @default(now()) @updatedAt // date time to notify user

    @@unique([userId, taarufId])
    @@map("inbox")
}

model InboxMessage {
    id                    String         @id @default(uuid())
    Inbox                 Inbox?         @relation(fields: [inboxId], references: [id])
    inboxId               String?
    sender                User           @relation(name: "MessageSender", fields: [senderId], references: [id])
    senderId              String
    receiver              User           @relation(name: "MessageReceiver", fields: [receiverId], references: [id])
    receiverId            String
    taaruf_process        TaarufProcess
    taaruf_process_id     String         @db.VarChar(255)
    taaruf_process_status ApprovalStatus
    title                 String         @db.VarChar(255)
    message               String         @db.Text
    createdAt             DateTime       @default(now())

    @@map("inbox_message")
}

model MainSlide {
    id        String   @id @default(uuid())
    text      String   @db.Text
    image     String   @db.Text
    image_md  String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("main_slide")
}

model ProcessStep {
    id          String   @id @default(uuid())
    title       String   @db.Text
    description String   @db.Text
    svg         String?  @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    @@map("process_step")
}

model About {
    id                 String   @id @default(uuid())
    title              String   @db.Text
    description        String   @db.Text
    footer_description String   @db.Text
    createdAt          DateTime @default(now())
    updatedAt          DateTime @default(now()) @updatedAt

    @@map("about")
}

model SocialMedia {
    id        String   @id @default(uuid())
    icon      String?  @db.Text
    url       String   @db.Text
    text      String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("social_media")
}

model Blog {
    id        String   @id @default(uuid())
    title     String   @db.Text
    content   String   @db.Text
    image     String   @db.Text
    image_md  String   @db.Text
    active    Boolean  @default(true)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("blog")
}
