// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String          @id @default(uuid())
    email              String          @unique @db.VarChar(100)
    firstname          String          @db.VarChar(100)
    lastname           String          @db.VarChar(100)
    password           String          @db.VarChar(100)
    Education          Education[]
    Hobby              Hobby[]
    Skill              Skill[]
    Married_goal       MarriedGoal[]
    Life_goal          LifeGoal[]
    active             Boolean         @default(false)
    verified           Boolean         @default(false)
    avatar             String?         @db.VarChar(255)
    avatar_md          String?         @db.VarChar(255)
    blurred_avatar     String?         @db.VarChar(255)
    blurred_avatar_md  String?         @db.VarChar(255)
    role               RoleStatus      @default(MEMBER)
    taaruf_status      TaarufStatus    @default(BLOCKED)
    auth               Auth[]
    Taaruf_gold        Taaruf_gold[]
    Payment            Payment[]
    reset_password     ResetPassword[]
    activations        Activation[]
    biodata            Biodata?
    bookmarks          Bookmark[]      @relation("UserBookmarks")
    bookmark_candidate Bookmark[]      @relation("UserCandidates")
    Taaruf             Taaruf[]        @relation("TaarufUser")
    Taaruf_candidate   Taaruf[]        @relation("TaarufCandidates")
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @default(now()) @updatedAt

    @@map("user")
}

model Client {
    id                String    @id @default(uuid())
    name              String    @db.VarChar(100)
    about             String?   @db.Text
    phone             String    @db.VarChar(20)
    address           String    @db.Text
    taaruf_muqoddimah String?   @db.Text
    login_muqoddimah  String?   @db.Text
    signup_muqoddimah String?   @db.Text
    youtube           String?   @db.VarChar(100)
    facebook          String?   @db.VarChar(100)
    twitter           String?   @db.VarChar(100)
    tiktok            String?   @db.VarChar(100)
    instagram         String?   @db.VarChar(100)
    linkedin          String?   @db.VarChar(100)
    galleries         Gallery[]
    sliders           Slider[]
    faqs              FAQ[]

    @@map("client")
}

enum RoleStatus {
    MEMBER
    ADMIN
    SUPERADMIN
}

enum TaarufStatus {
    OPEN
    PENDING
    BLOCKED
}

model Auth {
    id           String   @id @default(uuid())
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?
    access_token String   @db.VarChar(300)
    expiredAt    DateTime @default(now())
    path         String   @db.VarChar(100)
    method       String   @db.VarChar(100)
    createdAt    DateTime @default(now())

    @@map("auth")
}

model ResetPassword {
    id        String   @id @default(uuid())
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    used      Boolean  @default(false)
    expiredAt DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("reset_password")
}

model Gallery {
    id        String   @id @default(uuid())
    Client    Client?  @relation(fields: [clientId], references: [id])
    clientId  String?
    title     String?  @db.VarChar(100)
    photo     String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("gallery")
}

model Slider {
    id        String   @id @default(uuid())
    Client    Client?  @relation(fields: [clientId], references: [id])
    clientId  String?
    title     String?  @db.Text
    photo     String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("slider")
}

model FAQ {
    id        String   @id @default(uuid())
    Client    Client?  @relation(fields: [clientId], references: [id])
    clientId  String?
    question  String   @db.VarChar(255)
    answer    String   @db.VarChar(255)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("faq")
}

model Activation {
    id        String   @id @default(uuid())
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    used      Boolean  @default(false)
    expiredAt DateTime @default(now())
    createdAt DateTime @default(now())

    @@map("activation")
}

model Biodata {
    id                    String                @id @default(uuid())
    user                  User?                 @relation(fields: [userId], references: [id])
    userId                String?               @unique
    bio                   String                @db.Text
    phone                 String                @db.VarChar(20)
    company               String?               @db.VarChar(100)
    manhaj                ManhajStatus
    gender                Gender
    marriage_status       MarriageStatus
    marriage_permission   MarriagePermission
    physical_characters   PhysicalCharacter?
    non_physical_chars    NonPhysicalCharacter?
    marriage_preparations MarriagePreparation?
    family_members        FamilyMember[]
    dob                   DateTime              @db.Date
    birth_place           String                @db.VarChar(100)
    birth_order           Int                   @db.TinyInt
    address_town          String                @db.VarChar(100)
    address_province      String                @db.VarChar(100)
    hometown_province     String                @db.VarChar(100)
    address_zip_code      Int                   @db.Int
    ethnic                String                @db.VarChar(100)
    poligami_opinion      String                @db.Text
    createdAt             DateTime              @default(now())
    updatedAt             DateTime              @default(now()) @updatedAt

    @@map("biodata")
}

enum ManhajStatus {
    SALAF
    BARU_BELAJAR
    NON_SALAF
}

enum Gender {
    PRIA
    WANITA
}

enum MarriageStatus {
    LAJANG
    MENIKAH
    CERAI_HIDUP
    CERAI_MATI
}

enum MarriagePermission {
    POLIGAMI
    NON_POLIGAMI
}

model Province {
    id      String  @id @default(uuid())
    name    String  @unique() @db.VarChar(100)
    deleted Boolean @default(false)

    @@map("province")
}

model Education {
    id               String   @id @default(uuid())
    User             User?    @relation(fields: [userId], references: [id])
    userId           String?
    institution_name String   @db.VarChar(100)
    major            String?  @db.VarChar(100)
    degree           String?  @db.VarChar(100)
    city             String?  @db.VarChar(100)
    startYear        Int      @db.Year
    endYear          Int?     @db.Year
    deleted          Boolean  @default(false)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @default(now()) @updatedAt

    @@map("education")
}

model Hobby {
    id        String   @id @default(uuid())
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    title     String   @db.VarChar(100)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("hobby")
}

model Skill {
    id        String   @id @default(uuid())
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    title     String   @db.VarChar(100)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("skill")
}

model MarriedGoal {
    id        String   @id @default(uuid())
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    title     String   @db.VarChar(255)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("married_goal")
}

model LifeGoal {
    id        String   @id @default(uuid())
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    title     String   @db.VarChar(255)
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("life_goal")
}

model PhysicalCharacter {
    id                     String      @id @default(uuid())
    height                 Int         @default(0) @db.Int
    weight                 Int         @default(0) @db.Int
    body_shape             body_shape?
    skin_color             skin_color?
    hair_color             hair_color?
    hair_type              hair_type?
    eye_color              eye_Color?
    characteristic         Boolean     @default(false)
    characteristic_detail  String?     @db.Text
    medical_history        Boolean     @default(false)
    medical_history_detail String?     @db.Text
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @default(now()) @updatedAt
    Biodata                Biodata?    @relation(fields: [biodataId], references: [id])
    biodataId              String?     @unique

    @@map("physical_character")
}

enum body_shape {
    sangat_kurus
    kurus
    atletis
    normal
    gempal
    gemuk
    sangat_gemuk
}

enum skin_color {
    sawo_matang
    putih
    putih_kemerahan
    gelap
    hitam
}

enum hair_color {
    hitam
    pirang
    merah
    putih
}

enum hair_type {
    lurus
    ikal
    keriting
    kribo
    botak
}

enum eye_Color {
    hitam
    coklat
    biru
    hijau
}

model NonPhysicalCharacter {
    id                  String   @id @default(uuid())
    motto               String?  @db.Text()
    life_goal           String?  @db.Text()
    hobby               String?  @db.Text()
    spare_time_activity String?  @db.Text()
    positive_traits     String?  @db.Text()
    negative_traits     String?  @db.Text()
    liked_things        String?  @db.Text()
    unliked_things      String?  @db.Text()
    drink_alcohol       Boolean  @default(false)
    smoking             Boolean  @default(false)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now()) @updatedAt
    biodata             Biodata? @relation(fields: [biodataId], references: [id])
    biodataId           String?  @unique

    @@map("non_physical_character")
}

model FamilyMember {
    id           String        @id @default(uuid())
    Biodata      Biodata?      @relation(fields: [biodataId], references: [id])
    biodataId    String?
    relationship relationship?
    religion     religion?
    dob          String        @db.VarChar(20)
    education    String        @db.Text
    job          String        @db.Text
    is_alive     Boolean       @default(true)
    deleted      Boolean       @default(false)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt

    @@map("family_member")
}

enum relationship {
    ayah
    ibu
    kakak_pria
    kakak_wanita
    adik_pria
    adik_wanita
    ipar_pria
    ipar_wanita
    anak_kandung
    anak_angkat
}

enum religion {
    islam
    non_islam
}

model Taaruf_gold {
    id        String    @id @unique @default(uuid())
    user      User?     @relation(fields: [userId], references: [id])
    userId    String
    startedAt DateTime?
    endingAt  DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    Payment   Payment?

    @@map("taaruf_gold")
}

model Payment {
    id            String             @id @default(uuid())
    user          User?              @relation(fields: [userId], references: [id])
    userId        String
    gross_amount  Int
    midtransToken String?            @db.VarChar(255)
    status        String             @default("pending")
    paidAt        DateTime?
    midtrans      Midtrans_callback?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @default(now()) @updatedAt
    taaruf_gold   Taaruf_gold?       @relation(fields: [taaruf_goldId], references: [id])
    taaruf_goldId String?            @unique

    @@map("payment")
}

model Midtrans_callback {
    id            String   @id @default(uuid())
    payment       Payment? @relation(fields: [paymentId], references: [id])
    paymentId     String   @unique
    callback_data String   @db.LongText
    createdAt     DateTime @default(now())

    @@map("midtrans_callback")
}

model Bookmark {
    id          String   @id @default(uuid())
    user        User     @relation(name: "UserBookmarks", fields: [userId], references: [id])
    userId      String // This field holds the foreign key
    candidate   User     @relation(name: "UserCandidates", fields: [candidateId], references: [id])
    candidateId String // This field holds the foreign key`
    bookmarked  Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    @@map("bookmark")
}

// TAARUF PROGGRESS
model Taaruf {
    id          String          @id @default(uuid())
    user        User            @relation(name: "TaarufUser", fields: [userId], references: [id])
    userId      String // This field holds the foreign key
    candidate   User            @relation(name: "TaarufCandidates", fields: [candidateId], references: [id])
    candidateId String // This field holds the foreign key
    status      Boolean         @default(true)
    // message dibutuhkan saat taaruf di batalkan oleh user,
    // user mengisi alasan pembatalan
    message     String          @db.Text
    approval    TaarufApproval?
    nadhars     Nadhar[]
    khitbahs    Khitbah[]
    akads       Akad[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @default(now()) @updatedAt

    @@map("taaruf")
}

model TaarufApproval {
    id        String        @id @default(uuid())
    taaruf    Taaruf?       @relation(fields: [taarufId], references: [id])
    taarufId  String        @unique
    status    AprovalStatus @default(Pending)
    message   String        @db.Text
    reply     String        @db.Text
    updatedAt DateTime      @default(now()) @updatedAt

    @@map("taaruf_approval")
}

model Nadhar {
    id        String        @id @default(uuid())
    Taaruf    Taaruf?       @relation(fields: [taarufId], references: [id])
    taarufId  String
    schedule  DateTime      @default(now())
    status    AprovalStatus @default(Pending)
    message   String        @db.Text
    reply     String        @db.Text
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now()) @updatedAt

    @@map("nadhar")
}

model Khitbah {
    id        String        @id @default(uuid())
    Taaruf    Taaruf?       @relation(fields: [taarufId], references: [id])
    taarufId  String
    schedule  DateTime      @default(now())
    status    AprovalStatus @default(Pending)
    message   String        @db.Text
    reply     String        @db.Text
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now()) @updatedAt

    @@map("khitbah")
}

model Akad {
    id        String        @id @default(uuid())
    Taaruf    Taaruf?       @relation(fields: [taarufId], references: [id])
    taarufId  String
    schedule  DateTime      @default(now())
    status    AprovalStatus @default(Pending)
    message   String        @db.Text
    reply     String        @db.Text
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now()) @updatedAt

    @@map("akad")
}

enum AprovalStatus {
    Pending
    Yes
    No
}

model MarriagePreparation {
    id        String   @id @default(uuid())
    Biodata   Biodata? @relation(fields: [biodataId], references: [id])
    biodataId String?  @unique
    visi      String?  @db.Text
    misi      String?  @db.Text
    mental    String?  @db.Text
    mahar     String?  @db.Text
    cost      String?  @db.Text
    span_time String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("marriage_preparation")
}
