// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String       @id @default(uuid())
    email         String       @unique @db.VarChar(100)
    firstname     String       @db.VarChar(100)
    lastname      String       @db.VarChar(100)
    password      String       @db.VarChar(100)
    active        Boolean      @default(true)
    verified      Boolean      @default(false)
    avatar        String?      @db.VarChar(255)
    avatar_md     String?      @db.VarChar(255)
    role          RoleStatus   @default(MEMBER)
    taaruf_status TaarufStatus @default(BLOCKED)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @default(now()) @updatedAt
    auth          Auth[]
}

enum RoleStatus {
    MEMBER
    ADMIN
    SUPERADMIN
}

enum TaarufStatus {
    OPEN
    PENDING
    BLOCKED
}

model blog {
    id        String   @id @default(uuid())
    title     String   @db.VarChar(100)
    content   String   @db.Text
    deleted   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Client {
    id                String  @id @default(uuid())
    name              String  @db.VarChar(100)
    about             String? @db.Text
    phone             String  @db.VarChar(20)
    address           String  @db.Text
    taaruf_muqoddimah String? @db.Text
    login_muqoddimah  String? @db.Text
    signup_muqoddimah String? @db.Text
    youtube           String? @db.VarChar(100)
    facebook          String? @db.VarChar(100)
    twitter           String? @db.VarChar(100)
    tiktok            String? @db.VarChar(100)
    instagram         String? @db.VarChar(100)
    linkedin          String? @db.VarChar(100)
    //di mapping karena nyocokin sama yang diatas, ntar diubah aja wkwk (lupa pake caps lock)
    //untuk relasinya ntar aja kan ya?, yang penting clientnya aja dlu

    @@map("client")
}

model Auth {
    id           String   @id @default(uuid())
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?
    access_token String   @db.VarChar(300)
    path         String   @default("-") @db.VarChar(100)
    method       String   @default("-") @db.VarChar(100)
    expiredAt    BigInt   @db.BigInt
    createdAt    DateTime @default(now())
}
